Commands relevant to the tasks.

Task 1: Stores the sum of grades for each student in an associative array.

NOTE: Retrieve grades located in field/columns 3, 4, 5, and saving the total
      score within gradeSum associative array with $2 (student name) as the key.

NR > 1 {
    # Set each key as the student name.
    gradeSum[$2] = $3 + $4 + $5
}

END {
    for (s in gradeSum)
        print s "\'s total grade is", gradeSum[s] "."
}

Task 2: Calculates the average grade for each student and classifies them as Pass 
        (average â‰¥ 70) or Fail. (Must use a user-defined function to calculate the
         average.)

NOTE: gradeSum and gradeAvg arrays now initialize within the main body.
      User-defined function implemented and invoked for required output. 

# key: student names
# array: gradeSum
function calculateAverageGrade(array, key) {
    return array[key] / divisor
}

BEGIN {
    print "a3-25su"
    FS=","
    divisor = 3
}

# NR > 1 excludes the header row.
NR > 1 {
    # Use unique keys (student names) to build two separate arrays:
    # gradeSum and gradeAvg
    gradeSum[$2] = $3 + $4 + $5
    gradeAvg[$2] = calculateAverageGrade(gradeSum, $2) # invokes calculateAverageGrade()
    printf $2 "'s average grade is " gradeAvg[$2] " "
    if (gradeAvg[$2] >= 70)
        print "[PASS]"
    else
        print "[FAIL]"
}

Task 3: Determine the highest and lowest scoring students (total score)

NOTE: Program capable of retrieving the lowest/highest scoring students.
      Pass/fail status now saved into the "status" array. Key: student name.

BEGIN {
    print "a3-25su"
    FS=","
    divisor = 3
    currentLowestScore = 9999999999
    currentHighestScore = -1
}

# NR > 1 excludes the header row
NR > 1 {
    # Use unique keys (student names) to build two separate arrays:
    # gradeSum and gradeAvg
    gradeSum[$2] = $3 + $4 + $5
    gradeAvg[$2] = calculateAverageGrade(gradeSum, $2) # invokes calculateAverageGrade()
    printf $2 "'s average grade is " gradeAvg[$2] " "
    if (gradeAvg[$2] >= 70) {
        print "[PASS]"
        status[$2] = "PASS" # Initialize pass/fail status array per student
    } else {
        print "[FAIL]"
        status[$2] = "FAIL"
    }
    
    # Determine lowest scoring student
    if (gradeSum[$2] < currentLowestScore) {
        currentLowestScore = gradeSum[$2]
        studentWithLowest = $2
    }
    
    # Determine highest scoring student
    if (gradeSum[$2] > currentHighestScore) {
        currentHighestScore = gradeSum[$2]
        studentWithHighest = $2
    }
}

END {
    # s for student (the key)
    # for (s in gradeSum)

    printf "\nStudent with the lowest score: " studentWithLowest "\n"
    print "Total score: " gradeSum[studentWithLowest]
    print "Status: " status[studentWithLowest]
    
    print "Student with the highest score: " studentWithHighest
    print "Total score: " gradeSum[studentWithHighest]
    print "Status: " status[studentWithHighest]    
}

Task 4: Print the following for each student at the end
        * Student name
        * Total score
        * Average score
        * Status (pass/fail)

NOTE: Usage of for loop and several arrays within the end-block to satisfy output
      requirement. Redundant print statements removed.

END {
    # n for name (the key)
    for (n in gradeSum) { # alternative: for (i=0; i<indx; i++) req. names arr. & indx
        print "Student name: " n
        print "Total score: " gradeSum[n]
        print "Average score: " gradeAvg[n]
        printf "Status: " status[n] "\n\n"
    }

Task 5: Also, print the top and lowest scoring students

NOTE: Output requirement satisfied. Redundant print statements removed. This was 
      achieved using user-defined variables within the begin-block, two separate
      if-else statements within the main body, and two print statements within
      the end-block as shown below.

print "Top scoring student: " studentWithHighest
print "Lowest scoring student: " studentWithLowest
